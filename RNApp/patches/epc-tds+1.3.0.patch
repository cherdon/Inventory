diff --git a/node_modules/epc-tds/epc/giai/giai96.js b/node_modules/epc-tds/epc/giai/giai96.js
index 81eeb0b..9855ecc 100644
--- a/node_modules/epc-tds/epc/giai/giai96.js
+++ b/node_modules/epc-tds/epc/giai/giai96.js
@@ -17,7 +17,7 @@
  
 class Giai96 extends Epc {
 
-	static EPC_HEADER = 0x52;
+	static EPC_HEADER = 0x34;
 
 	static TOTAL_BITS = 96;
 	static PARTITION_OFFSET = 11;
diff --git a/node_modules/epc-tds/epc/utils/bit-array.js b/node_modules/epc-tds/epc/utils/bit-array.js
index 81b0901..d23d95c 100644
--- a/node_modules/epc-tds/epc/utils/bit-array.js
+++ b/node_modules/epc-tds/epc/utils/bit-array.js
@@ -54,9 +54,9 @@ class BitArray {
 
   set(value, startIndex, endIndex) {
     let v = BigInt(value);
-    for (let i = 0n; startIndex < endIndex; i++) {
+    for (let i = BigInt(0); startIndex < endIndex; i++) {
       endIndex--;
-      if ((v >> i) & 0b1n) { // check bit
+      if ((v >> i) & BigInt(0b1)) { // check bit
         this.setBit(endIndex);
       } else {
         this.clearBit(endIndex);
@@ -65,10 +65,10 @@ class BitArray {
   }
 
   getBigInt(startIndex, endIndex) {
-    let result = 0n;
-    for (let i = 0n; startIndex < endIndex; i++) {
+    let result = BigInt(0);
+    for (let i = BigInt(0); startIndex < endIndex; i++) {
       if (this.isBit(--endIndex)) {
-        result |= 1n << i; // set bit
+        result |= BigInt(1) << i; // set bit
       }
     }
     return result;
@@ -79,13 +79,13 @@ class BitArray {
   }
 
   getSigned(startIndex, endIndex) {
-    let i, result = 0n;
-    for (i = 0n; startIndex < endIndex; i++) {
+    let i, result = BigInt(0);
+    for (i = BigInt(0); startIndex < endIndex; i++) {
       if (this.isBit(--endIndex)) {
-        result |= 1n << i; // set bit
+        result |= BigInt(1) << i; // set bit
       }
     }
-    let mask = 1n << i - 1n;
+    let mask = BigInt(1) << i - BigInt(1);
     if (result & mask) { // check first bit
         result = (mask ^ result) - mask;
     }
