import { ESLint } from 'eslint';
import fs from 'fs';
import { parseSchema } from 'json-schema-to-zod';
import path from 'path';

const jsonSchemaFilePath = path.join(
  __dirname,
  '..',
  '..',
  'Data',
  'schema.json',
);
const outputFilePath = path.join(
  __dirname,
  '..',
  'app',
  'data',
  'generated-schema.ts',
);

// Read the JSON file
const jsonSchema = JSON.parse(fs.readFileSync(jsonSchemaFilePath, 'utf8'));

let jsFileContent =
  '/* Do not change this file directly, it is auto generated by `yarn run generate-schema`. */\n\n';
jsFileContent += "import { z } from 'zod';\n\n";
jsFileContent += 'export const schema = {\n';

for (const [key, schema] of Object.entries(jsonSchema.definitions)) {
  const js = parseSchema(schema as any);
  jsFileContent += `'${key}': ${js},\n`;
}

jsFileContent += '}\n\n';
jsFileContent += 'export default schema';

const eslint = new ESLint({
  useEslintrc: true,
  fix: true,
});

async function writeLintedCode(code: string, outputPath: string) {
  const results = await eslint.lintText(code);
  if (results && results[0] && results[0].output) {
    fs.writeFileSync(outputPath, results[0].output);
  } else {
    fs.writeFileSync(outputPath, code);
  }
  console.log(`Generated code written to "${outputPath}".`);
}

writeLintedCode(
  jsFileContent.replace(/catchall\(z\.any\(\)\)/g, 'catchall(z.unknown())'),
  outputFilePath,
);

function copyDataFile(filePath: Array<string>, append = '') {
  const srcPath = path.join(...[__dirname, '..', '..', 'Data', ...filePath]);
  const toPath = path.join(...[__dirname, '..', 'app', 'data', ...filePath]);

  const srcContent = fs.readFileSync(srcPath, 'utf8');

  writeLintedCode(
    '/* DO NOT change this file directly, it is auto generated by `yarn run generate-schema`. */\n\n' +
      `/* Please edit Data/${filePath.join('/')} instead. */\n\n` +
      srcContent +
      append,
    toPath,
  );
}

copyDataFile(['schema.ts']);
copyDataFile(
  ['types.ts'],
  `
// Below is for backward compatibility.

export type DataTypeWithAdditionalInfo<T extends DataTypeName> =
  DataTypeWithID<T>;

export type InvalidDataTypeWithAdditionalInfo<T extends DataTypeName> =
  InvalidDataTypeWithID<T>;

export const DATA_ADDITIONAL_INFO_KEYS = [
  '__type',
  '__id',
  '__rev',
  '__deleted',
  '__created_at',
  '__updated_at',
] as const;
`,
);
copyDataFile(['relations.ts']);
copyDataFile(['callbacks.ts']);
copyDataFile(['validation.ts']);
